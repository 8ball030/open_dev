"""Console script for open_dev."""
import textwrap
import time

import rich_click as click
from rich.progress import track

from open_dev.constants import HEADER
from open_dev.src.open_dev_repo import OpenDevRepo

click.rich_click.USE_MARKDOWN = True


import openai
import re
import os


openai.api_key = os.environ.get("OPENAI_API_KEY")


def summarize_changes(changes, title=False):
    # Extract the added and deleted lines from the changes
    added_lines = re.findall(r'\n\+(.*?)\n', changes)
    deleted_lines = re.findall(r'\n\-(.*?)\n', changes)
    #
    # # Join the added and deleted lines into a single string
    # text = '\n'.join(added_lines + deleted_lines)

    added_lines = "\n".join(added_lines)
    deleted_lines = "\n".join(deleted_lines)

    added_lines = f"Added:\n{added_lines}\n\n"
    deleted_lines = f"Deleted:\n{deleted_lines}\n\n"

    prompt = "The following is a paragraph eloquently describing the changes;"

    text = f"{added_lines}{deleted_lines}\n{prompt}"

    max_token = 200

    if title:
        prompt = "The following is a single line title for the pr;"
        text = f"{changes}\n{prompt}"
        max_token = 25

    # Use OpenAI's GPT-3 language model to summarize the text
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=text[:4096],
        max_tokens=max_token,
        n=1,
        stop="****",
        temperature=0.5,
    )

    # Get the summary from the response
    summary = response.choices[0].text.strip()

    return summary


def fstr(string):
    """Formatr strings from the interface."""
    return string.split(" ")


@click.group()
def repo():
    """Tooling to enable devs to buidl quick."""


@click.command()
def info():
    """Retrieves infromation about the current repo."""

    current_repo = OpenDevRepo()
    repo_info = textwrap.dedent(
        f"""
    Currently managing:

        name: \t\t{current_repo.name}
        hash: \t\t{current_repo.current_head[:8]}
        branch: \t\t{current_repo.branch}
        status: \t\t{current_repo.status}


    """
    )
    click.echo(repo_info)


@click.command()
@click.option("--target", default="main", help="The target branch to compare against.")
@click.option("--title", default=None, help="The title of the PR. If none will be autogenerated by chatgpt3.")
@click.option(
    "--description", default=None, help="The description of the PR. If none will be autogenerated by chatgpt3."
)
@click.option("--dry-run", is_flag=True, default=False, help="Simulate the commit and pr creation.")
def pull(target, title, description, dry_run):
    """Creates a pull request based on a summary of changes form chatcpt."""
    current_repo = OpenDevRepo()
    changes = current_repo.changes_from_target(target)
    click.echo(f"Detecting changes from {target} to {current_repo.branch}")

    click.echo("Summarising changes...")
    if description is None:
        # we try to get more summaries until the user is happy and then we create the PR
        accepted = False
        while not accepted:
            description = summarize_changes(changes)
            click.echo(description)
            accepted = click.confirm("Is this summary acceptable?")
    if title is None:
        accepted = False
        while not accepted:
            title = summarize_changes(description, title=True)
            click.echo(title)
            accepted = click.confirm("Is this title acceptable?")
    if not dry_run:
        pr = current_repo.create_pr(title, description, target)
        click.echo(f"Created PR: {pr}")
    else:
        click.echo("Dry run, not creating PR.")

    # we check wit


@click.group()
def main():
    """Oh dev tooling to speed up development."""


repo.add_command(info)
repo.add_command(pull)

for group in [
    repo,
]:
    main.add_command(group)


if __name__ == '__main__':
    main()
