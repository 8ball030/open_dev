"""Console script for open_dev."""
import textwrap
import time

import rich_click as click
from rich.progress import track

from open_dev.constants import HEADER
from open_dev.src.open_dev_repo import OpenDevRepo

click.rich_click.USE_MARKDOWN = True


def fstr(string):
    """Formatr strings from the interface."""
    return string.split(" ")


@click.group()
def repo():
    """Tooling to enable devs to buidl quick."""


@click.command()
def info():
    """Retrieves infromation about the current repo."""

    current_repo = OpenDevRepo()
    repo_info = textwrap.dedent(
        f"""
    Currently managing:

        name: \t\t{current_repo.name}
        hash: \t\t{current_repo.current_head[:8]}
        branch: \t\t{current_repo.branch}
        status: \t\t{current_repo.status}


    """
    )
    click.echo(repo_info)


click.echo(textwrap.dedent(HEADER))


# we have a wrapper function for prs.

# we basically want to take the target branch, and extract the difference from the current branch and the target branch
# we want to then take the difference and summarise the changes using openai
# we want to then take the summary and create a PR with the summary as the description

@click.command()
@click.option("--target", default="main", help="The target branch to compare against.")
@click.option("--title", default=None, help="The title of the PR. If none will be autogenerated by chatgpt3.")
@click.option("--description", default=None, help="The description of the PR. If none will be autogenerated by chatgpt3.")
@click.option("--dry-run", is_flag=True, default=False, help="Simulate the commit and pr creation.")
def pull(target, title, description, dry_run):
    """Creates a pull request based on a summary of changes form chatcpt."""
    current_repo = OpenDevRepo()
    changes = current_repo.changes_from_target(target)
    click.echo(f"Changes from {target} to {current_repo.branch}")
    click.echo(changes)








@click.group()
def main():
    """Oh dev tooling to speed up development."""


repo.add_command(info)
repo.add_command(pull)

for group in [repo, ]:
    main.add_command(group)


if __name__ == '__main__':
    main()
